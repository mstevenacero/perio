{"version":3,"file":"index.js","sources":["../../../src/@ionic-native/plugins/local-notifications/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport enum ELocalNotificationTriggerUnit {\n  SECOND = 'second',\n  MINUTE = 'minute',\n  HOUR = 'hour',\n  DAY = 'day',\n  WEEK = 'week',\n  MONTH = 'month',\n  QUARTER = 'quarter',\n  YEAR = 'year',\n  WEEKDAY = 'weekday',\n  WEEKDAY_ORDINAL = 'weekdayOrdinal',\n  WEEK_OF_MONTH = 'weekOfMonth'\n}\n\nexport interface ILocalNotificationEvery {\n    /**\n     * The minute.\n     */\n    minute?: number;\n\n    /**\n     * The hour.\n     */\n    hour?: number;\n\n    /**\n     * The day.\n     */\n    day?: number;\n\n    /**\n     * The day of week.\n     */\n    weekday?: number;\n\n    /**\n     * The week of yeaday of the ardinal week.\n     */\n    week?: number;\n\n    /**\n     * The day of the ordinal week.\n     */\n    weekdayOrdinal?: number;\n\n    /**\n     * The week of month.\n     */\n    weekOfMonth?: number;\n\n    /**\n     * The month.\n     */\n    month?: number;\n\n    /**\n     * The quarter.\n     */\n    quarter?: number;\n\n    /**\n     * The year.\n     */\n    year?: number;\n}\n\nexport interface ILocalNotificationTrigger {\n  /** ***** FIX ***** */\n\n  /**\n   * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.\n   * Default: now ~ new Date()\n   */\n  at?: Date;\n\n  /** ***** TIMESPAN ***** */\n\n  /**\n   * Amount of units\n   */\n  in?: number;\n\n  /**\n   * Unit\n   */\n  unit?: ELocalNotificationTriggerUnit;\n\n  /** ***** REPEAT/MATCH ***** */\n\n  /**\n   * Amount of units\n   */\n  count?: number;\n\n  /**\n   * The unit\n   */\n  every?: ELocalNotificationTriggerUnit | ILocalNotificationEvery;\n\n  /**\n   * The end of the repeating notification\n   */\n  before?: Date;\n\n  /**\n   * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.\n   * Only for \"repeat\"\n   * Default: now ~ new Date()\n   */\n  firstAt?: Date;\n\n  /**\n   * Only for \"match\"\n   */\n  after?: Date;\n\n  /** ***** LOCATION ***** */\n\n  /**\n   * IOS ONLY\n   * Center of the location\n   * Latitude and Longitude values\n   */\n  center?: number[];\n\n  /**\n   * IOS ONLY\n   * Radius in meters\n   */\n  radius?: number;\n\n  /**\n   * IOS ONLY\n   * Trigger on entry of the location\n   */\n  notifyOnEntry?: boolean;\n\n  /**\n   * IOS ONLY\n   * Trigger on exit of the location\n   */\n  notifyOnExit?: boolean;\n\n  /**\n   * IOS ONLY\n   * Trigger only once?\n   */\n  single?: boolean;\n}\n\nexport enum ILocalNotificationActionType {\n  INPUT = 'input',\n  BUTTON = 'button'\n}\n\n/**\n * Notification action\n *\n * @see https://github.com/katzer/cordova-plugin-local-notifications#actions\n */\nexport interface ILocalNotificationAction {\n  /**\n   * The id of the action is used as the event name in the listener function\n   */\n  id?: string;\n\n  /**\n   * The title of the notification message\n   */\n  title?: string;\n\n  /**\n   * Make this notification show when app in foreground.\n   */\n  foreground?: boolean;\n\n  /**\n   * Specifies whether the action causes the app to launch in the foreground\n   */\n  launch?: boolean;\n\n  /**\n   * If the value is 'decline' the action is displayed with special highlighting to indicate that it performs a destructive task\n   */\n  ui?: string;\n\n  /**\n   * Specifies whether the action requires that the user’s device be unlocked.\n   * When the user selects an action with this option, the system prompts\n   * the user to unlock the device\n   */\n  needsAuth?: boolean;\n\n  /**\n   * The resource path of the action icon\n   */\n  icon?: string;\n\n  /**\n   * ANDROID ONLY\n   * An array of pre-defined choices for users input\n   */\n  choices?: string[];\n\n  /**\n   * ANDROID ONLY\n   * Specifies whether the user can provide arbitrary text values\n   */\n  editable?: boolean;\n\n  /**\n   * IOS ONLY\n   * The title of the text input button that is displayed to the user.\n   */\n  submitTitle?: string;\n\n  /**\n   * The type of the action. If omitted 'button' is used.\n   */\n  type?: ILocalNotificationActionType;\n}\n\nexport interface ILocalNotificationProgressBar {\n  /**\n   * Is the progress bar enabled?\n   */\n  enabled?: boolean;\n\n  /**\n   * The current value\n   */\n  value?: number;\n\n  /**\n   * ANDROID ONLY\n   * The maximum value (default is 100)\n   */\n  maxValue?: number;\n\n  /**\n   * ANDROID ONLY\n   * Show an indeterminate progress bar\n   */\n  indeterminate?: boolean;\n\n  /**\n   * WINDOWS ONLY\n   * Gets or sets an optional string to be displayed instead of the\n   * default percentage string. If this isn't provided, something\n   * like \"70%\" will be displayed.\n   */\n  description?: string;\n\n  /**\n   * WINDOWS ONLY\n   * Sets the status (required), which is displayed underneath the progress bar\n   * on the left.\n   * This string should reflect the status of the operation,\n   * like \"Downloading...\" or \"Installing...\"\n   */\n  status?: string;\n}\n\nexport interface ILocalNotification {\n  /**\n   * A unique identifier required to clear, cancel, update or retrieve the local notification in the future\n   * Default: 0\n   */\n  id?: number;\n\n  /**\n   * First row of the notification\n   * Default: Empty string (iOS) or the app name (Android)\n   */\n  title?: string;\n\n  /**\n   * Second row of the notification\n   * Default: Empty string\n   */\n  text?: string | string[];\n\n  /**\n   * The number currently set as the badge of the app icon in Springboard (iOS) or at the right-hand side of the local notification (Android)\n   * Default: 0 (which means don't show a number)\n   */\n  badge?: number;\n\n  /**\n   * Uri of the file containing the sound to play when an alert is displayed\n   * Default: res://platform_default\n   */\n  sound?: string;\n\n  /**\n   * Arbitrary data, objects will be encoded to JSON string\n   * Default: null\n   */\n  data?: any;\n\n  /**\n   * ANDROID ONLY\n   * Uri of the icon that is shown in the ticker and notification\n   * Default: res://icon\n   */\n  icon?: string;\n\n  /**\n   * ANDROID ONLY\n   * Uri of the resource (only res://) to use in the notification layouts. Different classes of devices may return different sizes\n   * Default: res://ic_popup_reminder\n   */\n  smallIcon?: string;\n\n  /**\n   * ANDROID ONLY\n   * RGB value for the background color of the smallIcon.\n   * Default: Androids COLOR_DEFAULT, which will vary based on Android version.\n   */\n  color?: string;\n\n  /**\n   * ANDROID ONLY\n   * Use the default notification vibrate.\n   */\n  vibrate?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Define the blinking of the LED on the device.\n   * If set to true, the LED will blink in the default color with\n   * timings for on and off set to 1000 ms.\n   * If set to a string, the LED will blink in this ARGB value with\n   * timings for on and off set to 1000 ms.\n   * If set to an array, the value of the key 0 will be used as the color,\n   * the value of the key 1 will be used as the 'on' timing, the value of\n   * the key 2 will be used as the 'off' timing\n   */\n  led?: { color: string; on: number; off: number } | any[] | boolean | string;\n\n  /**\n   * Notification priority.\n   * Integers between -2 and 2, whereas -2 is minimum and 2 is maximum priority\n   */\n  priority?: number;\n\n  /**\n   * Is a silent notification\n   */\n  silent?: boolean;\n\n  /**\n   * Specifies whether the a click on the notification causes the app\n   * to launch in the foreground\n   */\n  launch?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Wakeup the device. (default is true)\n   */\n  wakeup?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled.\n   */\n  timeoutAfter?: number | false;\n\n  /**\n   * Actions id or actions\n   */\n  actions?: string | ILocalNotificationAction[];\n\n  /**\n   * When to trigger the notification\n   */\n  trigger?: ILocalNotificationTrigger;\n\n  /**\n   * A list of image attachments\n   */\n  attachments?: string[];\n\n  /**\n   * ANDROID ONLY\n   * If and how the notification shall show the when date.\n   * Possbile values:\n   *                  boolean: true equals 'clock', false disable a watch/counter\n   *                  'clock': Show the when date in the content view\n   *                  'chronometer': Show a stopwatch\n   *\n   */\n  clock?: boolean | string;\n\n  /**\n   * Shows a progress bar\n   * Setting a boolean is a shortcut for {enabled: true/false} respectively\n   */\n  progressBar?: ILocalNotificationProgressBar | boolean;\n\n  /**\n   * ANDROID ONLY\n   * If multiple notifications have the same group your app can present\n   * them as a single group.\n   */\n  group?: string;\n\n  /**\n   * ANDROID ONLY\n   * If set to 'true' this notification could use 'summary' to summarize\n   * the contents of the whole group\n   */\n  groupSummary?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Summary of the whole notification group. Should be used in conjuntion\n   * with 'groupSummary' set to true\n   */\n  summary?: string;\n\n  /**\n   * ANDROID ONLY\n   * Sets the number of items this notification represents.\n   */\n  number?: number;\n\n  /**\n   * ANDROID ONLY\n   * Set whether this is an \"ongoing\" notification.\n   * Ongoing notifications cannot be dismissed by the user,\n   * so your application or service must take care of canceling them.\n   */\n  sticky?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Make this notification automatically dismissed when the user touches it.\n   */\n  autoClear?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * If set to true the notification will be show in its entirety on all lockscreens.\n   * If set to false it will not be revealed on a secure lockscreen.\n   */\n  lockscreen?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Set the default notification options that will be used.\n   * The value should be one or more of the following fields combined with\n   * bitwise-or: DEFAULT_SOUND, DEFAULT_VIBRATE, DEFAULT_LIGHTS.\n   */\n  defaults?: number;\n\n  /**\n   * ANDROID ONLY\n   * Specifies the channel the notification should be delivered on.\n   */\n  channel?: string;\n\n  /**\n   * ANDROID ONLY\n   * Set the token for the media session\n   */\n  mediaSession?: string;\n\n  /**\n   * Make this notification show when app in foreground.\n   */\n  foreground?: boolean;\n}\n\n/**\n * @name Local Notifications\n * @description\n * This plugin allows you to display local notifications on the device\n *\n * @usage\n * ```typescript\n * import { LocalNotifications } from '@ionic-native/local-notifications';\n *\n *\n * constructor(private localNotifications: LocalNotifications) { }\n *\n * ...\n *\n *\n * // Schedule a single notification\n * this.localNotifications.schedule({\n *   id: 1,\n *   text: 'Single ILocalNotification',\n *   sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',\n *   data: { secret: key }\n * });\n *\n *\n * // Schedule multiple notifications\n * this.localNotifications.schedule([{\n *    id: 1,\n *    text: 'Multi ILocalNotification 1',\n *    sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',\n *    data: { secret:key }\n *   },{\n *    id: 2,\n *    title: 'Local ILocalNotification Example',\n *    text: 'Multi ILocalNotification 2',\n *    icon: 'http://example.com/icon.png'\n * }]);\n *\n *\n * // Schedule delayed notification\n * this.localNotifications.schedule({\n *    text: 'Delayed ILocalNotification',\n *    trigger: {at: new Date(new Date().getTime() + 3600)},\n *    led: 'FF0000',\n *    sound: null\n * });\n * ```\n * @interfaces\n * ILocalNotification\n */\n@Plugin({\n  pluginName: 'LocalNotifications',\n  plugin: 'cordova-plugin-local-notification',\n  pluginRef: 'cordova.plugins.notification.local',\n  repo: 'https://github.com/katzer/cordova-plugin-local-notifications',\n  platforms: ['Android', 'iOS', 'Windows']\n})\n@Injectable()\nexport class LocalNotifications extends IonicNativePlugin {\n  /**\n   * Informs if the app has the permission to show notifications.\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  hasPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Request permission to show notifications if not already granted.\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  requestPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Schedules a single or multiple notifications\n   * @param options {Notification | Array<ILocalNotification>} optional\n   */\n  @Cordova({\n    sync: true\n  })\n  schedule(options?: ILocalNotification | ILocalNotification[]): void {}\n\n  /**\n   * Updates a previously scheduled notification. Must include the id in the options parameter.\n   * @param options {ILocalNotification} optional\n   */\n  @Cordova({\n    sync: true\n  })\n  update(options?: ILocalNotification): void {}\n\n  /**\n   * Clears single or multiple notifications\n   * @param notificationId {any} A single notification id, or an array of notification ids.\n   * @returns {Promise<any>} Returns a promise when the notification had been cleared\n   */\n  @Cordova()\n  clear(notificationId: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Clears all notifications\n   * @returns {Promise<any>} Returns a promise when all notifications have cleared\n   */\n  @Cordova()\n  clearAll(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Cancels single or multiple notifications\n   * @param notificationId {any} A single notification id, or an array of notification ids.\n   * @returns {Promise<any>} Returns a promise when the notification is canceled\n   */\n  @Cordova()\n  cancel(notificationId: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Cancels all notifications\n   * @returns {Promise<any>} Returns a promise when all notifications are canceled\n   */\n  @Cordova()\n  cancelAll(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Checks presence of a notification\n   * @param notificationId {number}\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isPresent(notificationId: number): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Checks is a notification is scheduled\n   * @param notificationId {number}\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isScheduled(notificationId: number): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Checks if a notification is triggered\n   * @param notificationId {number}\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isTriggered(notificationId: number): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Check if a notification has a given type.\n   * @param {number} id The ID of the notification.\n   * @param {string} type  The type of the notification.\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  hasType(id: number, type: string): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Get the type (triggered, scheduled) for the notification.\n   * @param {number} id The ID of the notification.\n   */\n  @Cordova()\n  getType(id: number): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Get all the notification ids\n   * @returns {Promise<Array<number>>}\n   */\n  @Cordova()\n  getIds(): Promise<number[]> {\n    return;\n  }\n\n  /**\n   * Get the ids of scheduled notifications\n   * @returns {Promise<Array<number>>} Returns a promise\n   */\n  @Cordova()\n  getScheduledIds(): Promise<number[]> {\n    return;\n  }\n\n  /**\n   * Get the ids of triggered notifications\n   * @returns {Promise<Array<number>>}\n   */\n  @Cordova()\n  getTriggeredIds(): Promise<number[]> {\n    return;\n  }\n\n  /**\n   * Get a notification object\n   * @param notificationId {any} The id of the notification to get\n   * @returns {Promise<ILocalNotification>}\n   */\n  @Cordova()\n  get(notificationId: any): Promise<ILocalNotification> {\n    return;\n  }\n\n  /**\n   * Get all notification objects\n   * @returns {Promise<Array<ILocalNotification>>}\n   */\n  @Cordova()\n  getAll(): Promise<ILocalNotification[]> {\n    return;\n  }\n\n  /**\n   * Adds a group of actions\n   * @param groupId The id of the action group\n   * @param actions The actions of this group\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  addActions(groupId: any, actions: ILocalNotificationAction[]): Promise<any> {\n    return;\n  }\n\n  /**\n   * Removes a group of actions\n   * @param groupId The id of the action group\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  removeActions(groupId: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Checks if a group of actions is defined\n   * @param groupId The id of the action group\n   * @returns {Promise<boolean>} Whether the group is defined\n   */\n  @Cordova()\n  hasActions(groupId: any): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Gets the (platform specific) default settings.\n   * @returns {Promise<any>} An object with all default settings\n   */\n  @Cordova({\n    sync: true\n  })\n  getDefaults(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Overwrites the (platform specific) default settings.\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    sync: true\n  })\n  setDefaults(defaults: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * List of all scheduled notifications\n   * @returns {Promise<Array<ILocalNotification>>}\n   */\n  @Cordova()\n  getScheduled(): Promise<ILocalNotification[]> {\n    return;\n  }\n\n  /**\n   * List of all triggered notifications\n   * @returns {Promise<Array<ILocalNotification>>}\n   */\n  @Cordova()\n  getTriggered(): Promise<ILocalNotification[]> {\n    return;\n  }\n\n  /**\n   * Sets a callback for a specific event\n   * @param eventName {string} The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall. Custom event names are possible for actions\n   * @return {Observable}\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'un',\n    clearWithArgs: true\n  })\n  on(eventName: string): Observable<any> {\n    return;\n  }\n\n  /**\n   * Not an official interface, however its possible to manually fire events.\n   * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall. Custom event names are possible for actions\n   * @param args Optional arguments\n   */\n  @Cordova({\n    sync: true\n  })\n  fireEvent(eventName: string, args: any): void {}\n\n  /**\n   * Fire queued events once the device is ready and all listeners are registered.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  fireQueuedEvents(): Promise<any> {\n    return;\n  }\n}\n"]}