{"version":3,"sources":["../../../src/auth/auth.ts","../../../src/auth/base.ts","../../../src/auth/auth.module.ts"],"names":["USE_EMULATOR","InjectionToken","SETTINGS","TENANT_ID","LANGUAGE_CODE","USE_DEVICE_LANGUAGE","PERSISTENCE","options","nameOrConfig","platformId","zone","_useEmulator","_settings","tenantId","languageCode","useDeviceLanguage","persistence","_this","this","schedulers","ɵAngularFireSchedulers","keepUnstableUntilFirst","ɵkeepUnstableUntilFirstFactory","logins","Subject","auth","of","undefined","pipe","observeOn","outsideAngular","switchMap","runOutsideAngular","import","map","ɵfirebaseAppFactory","app","useEmulator","settings","ɵfetchInstance","name","join","setPersistence","shareReplay","bufferSize","refCount","isPlatformServer","authState","user","idToken","idTokenResult","credential","first","subscribe","getRedirectResult","then","Observable","onAuthStateChanged","bind","onIdTokenChanged","from","getIdToken","getIdTokenResult","merge","it","filter","ɵlazySDKProxy","spy","apply","_","val","startsWith","next","Injectable","args","providedIn","Inject","FIREBASE_OPTIONS","Optional","type","FIREBASE_APP_NAME","Object","decorators","PLATFORM_ID","NgZone","ɵapplyMixins","AngularFireAuth","applyActionCode","checkActionCode","confirmPasswordReset","createUserWithEmailAndPassword","currentUser","fetchSignInMethodsForEmail","isSignInWithEmailLink","sendSignInLinkToEmail","sendPasswordResetEmail","signInAndRetrieveDataWithCredential","signInAnonymously","signInWithCredential","signInWithCustomToken","signInWithEmailAndPassword","signInWithPhoneNumber","signInWithEmailLink","signInWithPopup","signInWithRedirect","signOut","updateCurrentUser","verifyPasswordResetCode","NgModule","providers"],"mappings":"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","sourcesContent":["import { Injectable, Inject, Optional, NgZone, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { Observable, of, from, merge, Subject } from 'rxjs';\nimport { switchMap, map, observeOn, shareReplay, first, filter } from 'rxjs/operators';\nimport {\n  FIREBASE_OPTIONS,\n  FIREBASE_APP_NAME,\n  FirebaseOptions,\n  FirebaseAppConfig,\n  ɵPromiseProxy,\n  ɵlazySDKProxy,\n  ɵfirebaseAppFactory,\n  ɵAngularFireSchedulers,\n  ɵkeepUnstableUntilFirstFactory,\n  ɵapplyMixins\n} from '@angular/fire';\nimport firebase from 'firebase/app';\nimport { isPlatformServer } from '@angular/common';\nimport { proxyPolyfillCompat } from './base';\nimport { ɵfetchInstance } from '@angular/fire';\n\nexport interface AngularFireAuth extends ɵPromiseProxy<firebase.auth.Auth> {}\n\ntype UseEmulatorArguments = [string, number];\nexport const USE_EMULATOR = new InjectionToken<UseEmulatorArguments>('angularfire2.auth.use-emulator');\n\nexport const SETTINGS = new InjectionToken<firebase.auth.AuthSettings>('angularfire2.auth.settings');\nexport const TENANT_ID = new InjectionToken<string>('angularfire2.auth.tenant-id');\nexport const LANGUAGE_CODE = new InjectionToken<string>('angularfire2.auth.langugage-code');\nexport const USE_DEVICE_LANGUAGE = new InjectionToken<boolean>('angularfire2.auth.use-device-language');\nexport const PERSISTENCE = new InjectionToken<string>('angularfire.auth.persistence');\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireAuth {\n\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<firebase.User|null>;\n\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  public readonly idToken: Observable<string|null>;\n\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  public readonly user: Observable<firebase.User|null>;\n\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  public readonly idTokenResult: Observable<firebase.auth.IdTokenResult|null>;\n\n  /**\n   * Observable of the currently signed-in user's credential, or null\n   */\n  public readonly credential: Observable<Required<firebase.auth.UserCredential>|null>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string|FirebaseAppConfig|null|undefined,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone,\n    @Optional() @Inject(USE_EMULATOR) _useEmulator: any, // can't use the tuple here\n    @Optional() @Inject(SETTINGS) _settings: any, // can't use firebase.auth.AuthSettings here\n    @Optional() @Inject(TENANT_ID) tenantId: string | null,\n    @Optional() @Inject(LANGUAGE_CODE) languageCode: string | null,\n    @Optional() @Inject(USE_DEVICE_LANGUAGE) useDeviceLanguage: boolean | null,\n    @Optional() @Inject(PERSISTENCE) persistence: string | null,\n  ) {\n    const schedulers = new ɵAngularFireSchedulers(zone);\n    const keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(schedulers);\n    const logins = new Subject<Required<firebase.auth.UserCredential>>();\n\n    const auth = of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => zone.runOutsideAngular(() => import('firebase/auth'))),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => zone.runOutsideAngular(() => {\n        const useEmulator: UseEmulatorArguments | null = _useEmulator;\n        const settings: firebase.auth.AuthSettings | null = _settings;\n        return ɵfetchInstance(`${app.name}.auth`, 'AngularFireAuth', app, () => {\n          const auth = zone.runOutsideAngular(() => app.auth());\n          if (useEmulator) {\n            // Firebase Auth doesn't conform to the useEmulator convention, let's smooth that over\n            auth.useEmulator(`http://${useEmulator.join(':')}`);\n          }\n          if (tenantId) {\n            auth.tenantId = tenantId;\n          }\n          auth.languageCode = languageCode;\n          if (useDeviceLanguage) {\n            auth.useDeviceLanguage();\n          }\n          if (settings) {\n            auth.settings = settings;\n          }\n          if (persistence) {\n            auth.setPersistence(persistence);\n          }\n          return auth;\n        }, [useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence]);\n      })),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    if (isPlatformServer(platformId)) {\n\n      this.authState = this.user = this.idToken = this.idTokenResult = this.credential = of(null);\n\n    } else {\n\n      // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth\n      //       (e.g, `import { auth } from 'firebase/app'`) are getting an undefined auth object unexpectedly\n      //       as we're completely lazy. Let's eagerly load the Auth SDK here.\n      //       There could potentially be race conditions still... but this greatly decreases the odds while\n      //       we reevaluate the API.\n      const _ = auth.pipe(first()).subscribe();\n\n      this.authState = auth.pipe(\n        // wait for getRedirectResult otherwise we often get extraneous nulls firing on page load even if\n        // a user is signed in\n        switchMap(auth => auth.getRedirectResult().then(() => auth, () => auth)),\n        switchMap(auth => zone.runOutsideAngular(() => new Observable<firebase.User|null>(auth.onAuthStateChanged.bind(auth)))),\n        keepUnstableUntilFirst,\n        // TODO figure out why I needed share, perhaps it's the observable construction?\n        shareReplay(1)\n      );\n\n      this.user = auth.pipe(\n        // see comment on authState\n        switchMap(auth => auth.getRedirectResult().then(() => auth, () => auth)),\n        switchMap(auth => zone.runOutsideAngular(() => new Observable<firebase.User|null>(auth.onIdTokenChanged.bind(auth)))),\n        keepUnstableUntilFirst,\n        shareReplay(1) // see authState\n      );\n\n      this.idToken = this.user.pipe(\n        switchMap(user => user ? from(user.getIdToken()) : of(null))\n      );\n\n      this.idTokenResult = this.user.pipe(\n        switchMap(user => user ? from(user.getIdTokenResult()) : of(null))\n      );\n\n      this.credential = auth.pipe(\n        switchMap(auth => merge(\n          auth.getRedirectResult().then(it => it, () => null),\n          logins,\n          // pipe in null authState to make credential zipable, just a weird devexp if\n          // authState and user go null to still have a credential\n          this.authState.pipe(filter(it => !it))\n        )),\n        // handle the { user: { } } when a user is already logged in, rather have null\n        map(credential => credential?.user ? credential : null),\n        keepUnstableUntilFirst,\n        shareReplay(1)\n      );\n\n    }\n\n    return ɵlazySDKProxy(this, auth, zone, { spy: {\n      apply: (name, _, val) => {\n        // If they call a signIn or createUser function listen into the promise\n        // this will give us the user credential, push onto the logins Subject\n        // to be consumed in .credential\n        if (name.startsWith('signIn') || name.startsWith('createUser')) {\n          // TODO fix the types, the trouble is UserCredential has everything optional\n          val.then((user: firebase.auth.UserCredential) => logins.next(user as any));\n        }\n      }\n    }});\n\n  }\n\n}\n\nɵapplyMixins(AngularFireAuth, [proxyPolyfillCompat]);\n","export const proxyPolyfillCompat = {\n  app: null,\n  applyActionCode: null,\n  checkActionCode: null,\n  confirmPasswordReset: null,\n  createUserWithEmailAndPassword: null,\n  currentUser: null,\n  fetchSignInMethodsForEmail: null,\n  isSignInWithEmailLink: null,\n  getRedirectResult: null,\n  languageCode: null,\n  settings: null,\n  onAuthStateChanged: null,\n  onIdTokenChanged: null,\n  sendSignInLinkToEmail: null,\n  sendPasswordResetEmail: null,\n  setPersistence: null,\n  signInAndRetrieveDataWithCredential: null,\n  signInAnonymously: null,\n  signInWithCredential: null,\n  signInWithCustomToken: null,\n  signInWithEmailAndPassword: null,\n  signInWithPhoneNumber: null,\n  signInWithEmailLink: null,\n  signInWithPopup: null,\n  signInWithRedirect: null,\n  signOut: null,\n  tenantId: null,\n  updateCurrentUser: null,\n  useDeviceLanguage: null,\n  useEmulator: null,\n  verifyPasswordResetCode: null,\n};\n","import { NgModule } from '@angular/core';\nimport { AngularFireAuth } from './auth';\n\n@NgModule({\n  providers: [ AngularFireAuth ]\n})\nexport class AngularFireAuthModule { }\n"]}